// 0:MyClosestHitShader barycentric triangle color, visualize world normal
// 1:MyAnyHitShader CSG boolean mesh operation
// 2:Single bounce Indirect lighting
#define RAY_TRACING_EXPERIMENT 2
// 0/1
#define SKY_IS_EMISSIVE 0
// To tweak TemporalAA >0, .. 1.0f:no temporalFeedback, 0.5f is ok
#define FEEDBACK_FRACTION  1.0f
// 0/1 animate TemporalAA jitter and noise seed
#define ANIMATE_OVER_TIME 1
// 0:reference path tracing, 1:area light sample, 2:reservoir
#define LEFT_METHOD 1
// 0:reference path tracing, 1:area light sample, 2:reservoir
#define RIGHT_METHOD 2
// 1:very low, 8:low, 64:good, 256:very good
#define LEFT_SAMPLE_COUNT 10
// 1:very low, 8:low, 64:good, 256:very good
#define RIGHT_SAMPLE_COUNT 10
// 0:off, 1:on (slow shader compile and shader runtime but useful for debugging)
#define GFX_FOR_ALL 0
// todo to make method 1 and method 2 the right brightness 
#define BRIGHTNESS_HACK 0.03f



#define INSTANCE_ID InstanceID()
// test
//#define INSTANCE_ID 0

// DXR functions
//  PrimitiveIndex() triangleId
//  InstanceID() user provided
//  InstanceIndex() autogenerated 
//  GeometryIndex() autogenerated (not valid is SM 6.3)
//  ObjectRayOrigin()
//  ObjectRayDirection()
//  ObjectToWorld3x4()
//  ObjectToWorld4x3()
//  WorldRayOrigin()
//  WorldRayDirection()
//  WorldToObject3x4()
//  WorldToObject4x3()
//
// ShaderModel 6.6 https://microsoft.github.io/DirectX-Specs/d3d/HLSL_SM_6_6_DynamicResources.html
// ResourceDescriptorHeap[] 

#ifndef RAYTRACING_HLSL
#define RAYTRACING_HLSL

#include "RaytracingHlslCompat.h"
#include "cellular.hlsl"
#include "Helper.hlsl"
#include "Reservoir.hlsl"
#include "GfxForAll.hlsl"

#define NV_SHADER_EXTN_SLOT u1
#define NV_SHADER_EXTN_REGISTER_SPACE space1
#include "../../external/nv-api/nvHLSLExtns.h"

RaytracingAccelerationStructure Scene : register(t0, space0);
// [xy]= frame buffer sized
RWTexture2D<float4> RenderTarget : register(u0);
// [xy]= frame buffer sized
RWTexture2D<float4> g_Feedback : register(u1);
// [xy]= frame buffer sized
RWTexture2D<float4> g_Reservoirs : register(u2);
// [xy]=float4(normal,depth) frame buffer sized
RWTexture2D<float4> g_GBufferA : register(u3);
// [xy]=float4(albedo, 0) frame buffer sized
RWTexture2D<float4> g_GBufferB : register(u4);
// [emissiveTriangleId] = EmissiveAreaValue
RWBuffer<float> g_EmissiveSATValue : register(u5);
// [emissiveTriangleId] = EmissiveAreaIndex uint4(sceneObjectId, meshInstanceId, triangleId,0) in this instance
RWBuffer<uint4> g_EmissiveSATIndex : register(u6);

//
ConstantBuffer<SceneConstantBuffer> g_sceneCB : register(b0);
//
ConstantBuffer<RayGenConstantBuffer> g_rayGenCB : register(b1);

// sizeof(IndexType) 2:16bit, 4:32bit
#define INDEX_STRIDE 4

struct Splat
{
    float3 position;
    float radius;
};

// index buffer (element size is INDEX_STRIDE), use LoadIndexBuffer() to access
ByteAddressBuffer g_indices[] : register(t0, space101);
// vertex buffer
StructuredBuffer<VFormatFull> g_vertices[] : register(t0, space102);
Texture2D<float4> g_Texture : register(t0, space103);
StructuredBuffer<Splat> g_splats[] : register(t0, space104);
StructuredBuffer<MaterialAttributes> g_materials[] : register(t0, space105);

// https://microsoft.github.io/DirectX-Specs/d3d/Raytracing.html
// { float2 barycentrics }
typedef BuiltInTriangleIntersectionAttributes MyAttributes;

// update App3.cpp if this gets larger
struct RayPayload
{
    //
    float3 materialColor;
    //
    float3 emissiveColor;
    // in world space, normalized
    float3 interpolatedNormal;
    // -1 if not set
    int primitiveIndex;
    // -1 if not set
    int instanceIndex;
    // to count intersections after sphere start, to test if inside the object
    int count;
    // used like z buffer, the smallest valus is used
    float minT;
    float minTfront;
};

struct Ray
{
    float3 origin;
    // normalized
    float3 direction;
};

// @param IBIndex e.g. INSTANCE_ID
// @param primitiveIndex from PrimitiveIndex()
// @return triangle corner vertex indices
uint3 LoadIndexBuffer(uint IBIndex, uint primitiveIndex )
{
    const uint indexOffsetBytes = 0;    // for now
    // triangle corner vertex indices
    uint offsetBytes = indexOffsetBytes + primitiveIndex * (INDEX_STRIDE * 3);

    // needed?
    const uint dwordAlignedOffset = offsetBytes & ~3;

    uint3 indices;

    if(INDEX_STRIDE == 2)
    {
        const uint2 four16BitIndices = g_indices[IBIndex].Load2(dwordAlignedOffset);


        if (dwordAlignedOffset == offsetBytes)
        {
            indices.x = four16BitIndices.x & 0xffff;
            indices.y = (four16BitIndices.x >> 16) & 0xffff;
            indices.z = four16BitIndices.y & 0xffff;
        }
        else
        {
            indices.x = (four16BitIndices.x >> 16) & 0xffff;
            indices.y = four16BitIndices.y & 0xffff;
            indices.z = (four16BitIndices.y >> 16) & 0xffff;
        }
    }
    else
    {
        indices = g_indices[IBIndex].Load3(dwordAlignedOffset);
    }


    return indices;
}

inline Ray GenerateCameraRay(uint2 index, in float3 cameraPosition, in float4x4 worldFromClip, float2 jitterXY)
{
#if ANTIALIASING == 0
    float2 xy = index + 0.5f; // center in the middle of the pixel.
#else // ANTIALIASING
    // 0..1
//    float jitter = ((g_sceneCB.FrameIndex % 8) + 0.5f) / 8.0f;
    // float2(0..1, 0..1)
//    float2 jitterXY = float2(frac(jitter * 4.0f), jitter);
    float2 xy = index + jitterXY;
#endif // ANTIALIASING

    float2 screenPos = xy / DispatchRaysDimensions().xy * 2.0 - 1.0;

    // Invert Y for DirectX-style coordinates.
    screenPos.y = -screenPos.y;

    // a way to compute cameraPosition, need to rename the input parameter
//    float4 cameraPositionHom = mul(worldFromClip, float4(0, 0, 0, 1));
//    float3 cameraPosition = cameraPositionHom.xyz / cameraPositionHom.w;

    // Unproject the pixel coordinate into a world position.
    float4 worldHom = mul(worldFromClip, float4(screenPos, 1, 1));
    float3 world = worldHom.xyz / worldHom.w;

    Ray ray;
    ray.origin = cameraPosition;
    ray.direction = normalize(world - ray.origin);

    return ray;
}


float3 filmicToneMapping(float3 color)
{
    color = max(0, color - 0.004f);
    color = (color * (6.2f * color + 0.5f)) / (color * (6.2f * color + 1.7f) + 0.06f);
    return color;
}

// @param worldRayDirection normalized, e.g. WorldRayDirection()
float3 getSkyColor(float3 worldRayDirection)
{
    float3 skyColor = 0;

#if SKY_IS_EMISSIVE == 1
    // 0..1
    float alpha = worldRayDirection.y * 0.5f + 0.5f;
    skyColor = lerp(float3(0.2f, 0.3f, 0.9f) * 0.2f, float3(0.2f, 0.3f, 0.9f) * 0.6f, alpha);
#endif

    return skyColor;
}

// https://en.wikipedia.org/wiki/Binary_search
// find first occurrence of searchKey in buffer
uint binary_search_findIndex(float searchValue, uint elementCount, RWBuffer<float> buffer)
{
	uint l = 0;
	uint r = elementCount;

	while (l < r)
	{
		uint m = (l + r) / 2;
		float valueHere = buffer[m];

		if (valueHere < searchValue)
			l = m + 1;
		else
			r = m;
	}

	return l;
}


// @param meshInstanceId e.g. 0:meshA, 1:meshB
void getGlobalTriangle(uint meshInstanceId, uint meshTriangleId, out float3 wsPosCorners[3], out uint materialId)
{
    uint3 vertexIndices = LoadIndexBuffer(meshInstanceId, meshTriangleId);
    for(int i = 0; i < 3; ++i)
    {
        uint vertexIndex = vertexIndices[i];
        float3 osPos = g_vertices[meshInstanceId][vertexIndex].position;

        // todo
//        wsPos[i] = mul(, float4(osPos, 1));
        wsPosCorners[i] = osPos;

        //  materialid is per triangle but stored per vertex
        materialId = g_vertices[meshInstanceId][vertexIndex].materialId;
    }
}

float3 getRandomPointInTriangle(inout uint rndState, float3 pos[3])
{
    // 0..1, 0..1
    float2 uv = nextRand2(rndState);

    // flip along diagonal if outside of triangle
    if(uv.x + uv.y > 1)
    {
        uv.x = 1.0f - uv.x;
        uv.y = 1.0f - uv.y;
    }

    // sums up to 1
    float3 bary = float3(uv, 1.0f - uv.x - uv.y);

    return pos[0] * bary.x + pos[1] * bary.y + pos[2] * bary.z;
}

// hard coded to work with Quad.obj
// @param outNormal will be normalized
// @return light sample wsPos
float3 getEmissiveQuadSample(float3 rayDirection, inout uint rndState, out float3 outNormal, out float3 emissiveColor)
{
    // 0..1
	float rnd = nextRand(rndState);

    // 0..g_sceneCB.emissiveSATSize-1
    uint emissiveTriangleId = binary_search_findIndex(rnd, g_sceneCB.emissiveSATSize, g_EmissiveSATValue);

    uint4 packedIndex = g_EmissiveSATIndex[emissiveTriangleId];
    uint meshInstanceId = packedIndex.y;
    uint meshTriangleId = packedIndex.z;

    float3 wsPosCorners[3];

    uint materialId;
    getGlobalTriangle(meshInstanceId, meshTriangleId, wsPosCorners, materialId);

    float3 u = wsPosCorners[1] - wsPosCorners[0];
    float3 v = wsPosCorners[2] - wsPosCorners[0];
    outNormal = normalize(cross(u,v));

    emissiveColor = g_materials[meshInstanceId][materialId].emissiveColor;

    return getRandomPointInTriangle(rndState, wsPosCorners);
}

// @param n0 normalized normal at 0, as surface
// @param n1 normalized normal at 1, at light
float computeWeight(float3 delta0To1, float3 n0, float3 n1)
{
    float deltaLength2 = dot(delta0To1, delta0To1);

    // todo: handle NaN
    float3 delta = normalize(delta0To1);

//    float area = 64.0f * sqr(0.08f); // -4..4 * 0.08f => 8x8 * 0.08f * 0.08f
//    float area = 3.14159265f;
    float area = g_sceneCB.emissiveSumArea;

    // / deltaLength2: Inverse Square Law
    // + small number to avoid div by 0
    float weight = area / (deltaLength2 + 0.00001f) * PI * PI;    // "Physical Based Rendering" page 620
//    float weight = area / PI;
    weight *= saturate(dot(delta, n0)); // 
//    weight *= abs(dot(delta, n0));
    weight *= saturate(dot(delta, -n1));    // if area light source position represent disks we need this
//    weight *= abs(dot(delta, n1));

    return weight;
}

// @param reservoirSampleCount >=1, how many times we try to find a better sample (shadows not taken into account for performance)
// @param p position
// @param surfaceNormal normalized normal
Reservoir sampleLightsForReservoir(uint reservoirSampleCount, uint rndState, float3 p, float3 surfaceNormal)
{
    Reservoir ret;

    ret.init();

	for (uint i = 0; i < reservoirSampleCount; i++)
	{
        uint rndStateBefore = rndState;

        // normalized
        float3 lightNormal;
        float3 emissiveColor;
        float3 lightPos = getEmissiveQuadSample(p, rndState, lightNormal, emissiveColor);
        float weight = computeWeight(lightPos - p, surfaceNormal, lightNormal);
        
        ret.stream(rndStateBefore, randomNext(rndState), weight, 1.0f);
    }

    // todo: investigate
    ret.finalize(1.0f, reservoirSampleCount);

    return ret;
}

float2 PxFromWS(float3 wsPos)
{
    float3 csPos = homAway(mul(g_sceneCB.clipFromWorld, float4(wsPos, 1)));
    float2 uv = csPos.xy * float2(0.5f, -0.5f) + 0.5f;
    float2 pxPos = g_sceneCB.frameBufferSize.xy * uv;

    return pxPos;
}

// @param n normalized normal 
float computeLightPdf(Reservoir res, float3 surfacePos, float3 surfaceNormal)
{
    float3 lightNormal;
    float3 emissiveColor;
    float3 lightPos = getEmissiveQuadSample(surfacePos, res.rndState, lightNormal, emissiveColor);
    float weight = computeWeight(lightPos - surfacePos, surfaceNormal, lightNormal);

    return weight;
}

// aka RTXDI_DISpatioTemporalResampling
// @param surfaceNormal normalized
Reservoir TemporalResampling(uint2 pixelPosition, inout uint rndState, float3 surfacePos, float3 surfaceNormal, Reservoir curSample)
{
    Reservoir state;
    state.init();

    state.combine(curSample, 0.5f, curSample.targetPdf);

//    if(state.isValid())
//        state.finalize(1.0f, state.M);
//    return state;

        // investigate, all code here has no effect, why?



    bool foundNeighbor = false;
    float radius = 4; // nvidia magic
    int2 foundPos = 0;

    [loop] for (int i = 0; i < 9 && !foundNeighbor; i++)
    {
        int2 offset = 0;
        if (i > 0)
        {
            offset.x = int((randomNext(rndState) - 0.5f) * radius);
            offset.y = int((randomNext(rndState) - 0.5f) * radius);
        }
        int2 idx = pixelPosition + offset;

        idx = clamp(idx, int2(0, 0), int2(g_sceneCB.frameBufferSize.xy) - 1);

        float3 localN = g_GBufferA[idx].xyz;    // already normalized
        bool validNeighbor = saturate(dot(localN, surfaceNormal)) > 0.5f;
        if (!validNeighbor)
            continue;

        foundPos = idx;
        foundNeighbor = true;
    }

	if (foundNeighbor)
    {
        ReservoirPacked packed;
        packed.raw[0] = g_Reservoirs[foundPos * uint2(2, 1) + uint2(0, 0)];
        packed.raw[1] = g_Reservoirs[foundPos * uint2(2, 1) + uint2(1, 0)];
        Reservoir prevSample;
        prevSample.loadFromRaw(packed);

        // RayMachine is using 32
        uint historyLimit = 32;

    //                        prevSample.spatialDistance += spatialOffset;
        prevSample.age += 1;    // RayMachine does not have this

        float neighborWeight = 0.0f;
        if(prevSample.isValid())
        {
            prevSample.M = min(prevSample.M, historyLimit);

//            Reservoir localReservoir = sampleLightsForReservoir(1, rndState, rayDesc.Origin, payload.interpolatedNormal);

            // Computes the weight of the given light samples when the given surface is
            // shaded using that light sample. Exact or approximate BRDF evaluation can be
            // used to compute the weight. ReSTIR will converge to a correct lighting result
            // even if all samples have a fixed weight of 1.0, but that will be very noisy.
            // Scaling of the weights can be arbitrary, as long as it's consistent
            // between all lights and surfaces.
//            neighborWeight = 1.0;   // todo
            neighborWeight = computeLightPdf(prevSample, surfacePos, surfaceNormal);
        }
        state.combine(prevSample, randomNext(rndState), neighborWeight);
    }

    if(state.isValid())
        state.finalize(1.0f, state.M);

    return state;
}

[shader("raygeneration")]
void BasePass()
{
//    RenderTarget[DispatchRaysIndex().xy] = float4(1,1,1, 1);

    bool perFrameNoise = ANIMATE_OVER_TIME == 1;

    // animate jitter offset over time for TemporalAA and GI
    int2 move = 0;

    if(perFrameNoise)
    {
        move = g_sceneCB.FrameIndex * int2(13, 7);
    }

    // float2(0..1, 0..1) Blue Noise
    float2 jitterXY = g_Texture.Load(int3((DispatchRaysIndex().xy + move) % 256, 0)).rg;

// IntelArc artifact with g_Texture.Load()
//    uint startTime = NvGetSpecial(NV_SPECIALOP_GLOBAL_TIMER_LO);

    float2 lerpValues = (float2)DispatchRaysIndex() / (float2)DispatchRaysDimensions();

    uint section = DispatchRaysIndex().x / 8;

    Ray ray = GenerateCameraRay(DispatchRaysIndex().xy, g_sceneCB.cameraPosition.xyz, g_sceneCB.worldFromClip, jitterXY);
    float3 origin = ray.origin;
    float3 rayDir = ray.direction;

    // Trace the ray.
    // Set the ray's extents.
    RayDesc rayDesc;
    rayDesc.Origin = origin;
    rayDesc.Direction = rayDir;
    // Set TMin to a non-zero small value to avoid aliasing issues due to floating - point errors.
    // TMin should be kept small to prevent missing geometry at close contact areas.
    rayDesc.TMin = 0.001f;
    rayDesc.TMax = 10000.0f;

    RayPayload payload = (RayPayload)0;
    payload.primitiveIndex = -1;
    payload.instanceIndex = -1;
    payload.minT = payload.minTfront = rayDesc.TMax;

    RAY_FLAG flags = RAY_FLAG_CULL_BACK_FACING_TRIANGLES;
    //RAY_FLAG flags = RAY_FLAG_NONE;
    uint instanceMask = ~0;

    uint RayContributionToHitGroupIndex = 0;
    uint MultiplierForGeometryContributionToHitGroupIndex = 1;
    uint MissShaderIndex = 0;

    TraceRay(Scene, flags, instanceMask, RayContributionToHitGroupIndex, MultiplierForGeometryContributionToHitGroupIndex, MissShaderIndex, rayDesc, payload);

    g_GBufferA[DispatchRaysIndex().xy] = float4(payload.interpolatedNormal, payload.minT);
    g_GBufferB[DispatchRaysIndex().xy] = float4(payload.materialColor, 0);

}

[shader("raygeneration")]
void ShadingPass()
{
/*
    // visualize summed area table
    {
        float2 p = DispatchRaysIndex().xy / (float2)DispatchRaysDimensions().xy;
        uint emissiveTriangleId = binary_search_findIndex(p.x, g_sceneCB.emissiveSATSize, g_EmissiveSATValue);

        float value = emissiveTriangleId / (float)(g_sceneCB.emissiveSATSize - 1);
        float g = value > (1.0f - p.y);

        RenderTarget[DispatchRaysIndex().xy] = float4(g,g,g,1);
        return;
    }
*/
    // uncomment to visualize base pass GBuffer data
//    RenderTarget[DispatchRaysIndex().xy] = float4(normalize(g_GBufferA[DispatchRaysIndex().xy].xyz)*0.5f+0.5f,1);   return;
//    RenderTarget[DispatchRaysIndex().xy] = float4(g_GBufferB[DispatchRaysIndex().xy].xyz,1);   return;

#if GFX_FOR_ALL == 1
    struct ContextGather ui;			// pixel shader or compute shader looping through all pixels
    ui.init(DispatchRaysIndex().xy, int2(10, 10));
    ui.mouseXY = g_sceneCB.mouseXY.xy;
    ui.scale = 2;

    // left menu bar
    bool showNormal = ui.printDisc(float4(0.5f, 0.5f, 1.0f, 1.0f));
    if(showNormal)
    {
        ui.printTxt(' ');
        ui.printTxt('N', 'o', 'r', 'm', 'a', 'l');
    }
    ui.printLF();
    bool showDepth = ui.printDisc(float4(1, 0, 0, 1));
    if(showDepth)
    {
        ui.printTxt(' ');
        ui.printTxt('D', 'e', 'p', 't', 'h');
    }
    ui.printLF();
    bool showEmissive = ui.printDisc(float4(1, 1, 1, 1));
    if(showEmissive)
    {
        ui.printTxt(' ');
        ui.printTxt('E', 'm', 'i', 't');
    }
    ui.printLF();
    bool showAlbedo = ui.printDisc(float4(0, 1, 0, 1));
    if(showAlbedo)
    {
        ui.printTxt(' ');
        ui.printTxt('A', 'l', 'b', 'e', 'd', 'o');
    }

    ui.scale = 1;
#endif // GFX_FOR_ALL == 1

    bool right = DispatchRaysIndex().x > 1280/2;

    // see LEFT_METHOD or RIGHT_METHOD
    uint localMethod = right ? RIGHT_METHOD : LEFT_METHOD;

    bool perFrameNoise = ANIMATE_OVER_TIME == 1 || localMethod == 2;

    // animate jitter offset over time for TemporalAA and GI
    int2 move = 0;

    if(perFrameNoise)
    {
        move = g_sceneCB.FrameIndex * int2(13, 7);
    }

    // float2(0..1, 0..1) Blue Noise
    float2 jitterXY = g_Texture.Load(int3((DispatchRaysIndex().xy + move) % 256, 0)).rg;

// IntelArc artifact with g_Texture.Load()
//    uint startTime = NvGetSpecial(NV_SPECIALOP_GLOBAL_TIMER_LO);

    float2 lerpValues = (float2)DispatchRaysIndex() / (float2)DispatchRaysDimensions();

    uint section = DispatchRaysIndex().x / 8;

    Ray ray = GenerateCameraRay(DispatchRaysIndex().xy, g_sceneCB.cameraPosition.xyz, g_sceneCB.worldFromClip, jitterXY);
    float3 origin = ray.origin;
    float3 rayDir = ray.direction;
//    float3 origin = float3(0, 0, -1);
//    float3 rayDir = float3(lerpValues.xy * 2.0f - 1.0f, 1);

    // Trace the ray.
    // Set the ray's extents.
    RayDesc rayDesc;
    rayDesc.Origin = origin;
    rayDesc.Direction = rayDir;
    // Set TMin to a non-zero small value to avoid aliasing issues due to floating - point errors.
    // TMin should be kept small to prevent missing geometry at close contact areas.
    rayDesc.TMin = 0.001f;
    rayDesc.TMax = 10000.0f;

/*
    // ugly visualize getEmissiveQuadSample
    if(0)
    for(int i = 0; i < 50; ++i)
    {
        const float sphereRadius = 0.05f;

        uint rnd2 = initRand(82927 * i, 1233);

        float3 normal;
        float3 samplePos = getEmissiveQuadSample(rayDesc.Origin, rnd2, normal);
        if(sphIntersect(rayDesc.Origin, rayDesc.Direction, samplePos, sphereRadius).y > 0) // yellow sphere
        {
            RenderTarget[DispatchRaysIndex().xy] = float4(1, 1, 0, 1);
            return;
        }
        if(sphIntersect(rayDesc.Origin, rayDesc.Direction, samplePos + normal * sphereRadius, 0.03f).y > 0)    // with white dot to indicate normal direction
        {
            RenderTarget[DispatchRaysIndex().xy] = float4(1, 1, 1, 1);
            return;
        }
    }
*/


#if GFX_FOR_ALL == 1
    // visualize getEmissiveQuadSample in reservoir under mouse cursor
    if(localMethod == 2)
    {
        Reservoir reservoir;

        int2 currentXY = g_sceneCB.mouseXY.xy;

        ReservoirPacked packed;
        packed.raw[0] = g_Reservoirs[currentXY * uint2(2, 1) + uint2(0, 0)];
        packed.raw[1] = g_Reservoirs[currentXY * uint2(2, 1) + uint2(1, 0)];
        reservoir.loadFromRaw(packed);

        uint rnd2 = reservoir.rndState;
//        uint rnd2 = initRand(currentXY.x, currentXY.y);
        const float sphereRadius = 0.05f;

        float3 normal;
        float3 emissiveColor;
        float3 samplePos = getEmissiveQuadSample(rayDesc.Origin, rnd2, normal, emissiveColor);

        if(reservoir.isValid())
        {
            float2 pxSample = PxFromWS(samplePos);

            ui.drawCircle(pxSample, 5.0f, float4(0.1f, 0.8f, 0.1f, 1), 2);
    //        ui.drawLine(pxSample, currentXY + 0.5f, float4(0.5f, 0.5f, 0.5f, 1), 2);
    //        ui.drawLine(pxSample, PxFromWS(samplePos + normal * sphereRadius * 5), float4(0.1f, 0.1f, 1.0f, 1), 2);
            ui.drawLine(pxSample, PxFromWS(samplePos + normal * sphereRadius * 5), float4(emissiveColor, 1), 2);
        }

        if(!showNormal && !showDepth && !showEmissive && !showAlbedo)
        {
            if(!reservoir.isValid())
                ui.textColor.rgb = float3(1,0,0);

            ui.pxLeftTop = ui.pxCursor = currentXY + int2(20, -50);
            ui.printTxt('r', 'n', 'd', ':');
            ui.printHex(reservoir.rndState);
            ui.printLF();

            ui.printTxt('p', 'd', 'f', ':');
            ui.printFloat(reservoir.targetPdf);
            ui.printLF();

            ui.printTxt('w', 'S', 'u', 'm', ':');
            ui.printFloat(reservoir.weightSum);
            ui.printLF();

            ui.printTxt('a', 'g', 'e', ':');
            ui.printFloat(reservoir.age);
            ui.printLF();

            ui.printTxt('m', ':');
            ui.printInt((int)reservoir.M);
            ui.drawCrosshair(currentXY, 10, float4(0, 1, 0, 1));
        }
    }
#endif // GFX_FOR_ALL == 1




    RayPayload payload = (RayPayload)0;
    payload.primitiveIndex = -1;
    payload.instanceIndex = -1;
    payload.minT = payload.minTfront = rayDesc.TMax;

    //RAY_FLAG flags = RAY_FLAG_CULL_BACK_FACING_TRIANGLES;
    RAY_FLAG flags = RAY_FLAG_NONE;
    uint instanceMask = ~0;

    uint RayContributionToHitGroupIndex = 0;
    uint MultiplierForGeometryContributionToHitGroupIndex = 1;
    uint MissShaderIndex = 0;

#if RAY_TRACING_EXPERIMENT == 0
    // closesthit
    TraceRay(Scene, flags, instanceMask, RayContributionToHitGroupIndex, MultiplierForGeometryContributionToHitGroupIndex, MissShaderIndex, rayDesc, payload);
//    RenderTarget[DispatchRaysIndex().xy] = float4(payload.interpolatedNormal * 0.5f + 0.5f, 1.0f); // face normal
//    RenderTarget[DispatchRaysIndex().xy] = float4(payload.materialColor, 1.0f); // color e.g. barycentrics
//    RenderTarget[DispatchRaysIndex().xy] = float4(IndexToColor(payload.primitiveIndex), 1); // unique color for each triangle


#elif RAY_TRACING_EXPERIMENT == 1
    TraceRay(Scene, g_sceneCB.raytraceFlags, instanceMask, RayContributionToHitGroupIndex, MultiplierForGeometryContributionToHitGroupIndex, MissShaderIndex, rayDesc, payload);
    RenderTarget[DispatchRaysIndex().xy] = float4(payload.interpolatedNormal * 0.5f + 0.5f, 1.0f); // normal

#elif RAY_TRACING_EXPERIMENT == 2
//    float AO = 0.0f;
    flags = RAY_FLAG_CULL_BACK_FACING_TRIANGLES;
    TraceRay(Scene, flags, instanceMask, RayContributionToHitGroupIndex, MultiplierForGeometryContributionToHitGroupIndex, MissShaderIndex, rayDesc, payload);
    flags = RAY_FLAG_NONE;
    
//    g_GBufferA[DispatchRaysIndex().xy] = float4(payload.interpolatedNormal, payload.minT);
//    g_GBufferB[DispatchRaysIndex().xy] = float4(payload.materialColor, 0);

    bool highlightPixel = false;

    float3 hdr = 0;

    if (any(payload.interpolatedNormal != float3(0, 0, 0))) // if emissive?
    {
        const float3 materialColor = payload.materialColor;

        //
        // animate random over time for monte carlo integration 
        uint perFrameNoiseSeed = 0;


        if(perFrameNoise)
            perFrameNoiseSeed = (uint)(g_sceneCB.sceneParam0.x * 12347);


        uint rndState2 = initRand(dot(DispatchRaysIndex(), uint3(8227, 2113, 1)), 0x1245678 + perFrameNoiseSeed);


        uint rndState = initRand(dot(DispatchRaysIndex(), uint3(82927, 21313, 1)), 0x12345678 + perFrameNoiseSeed);
//        uint rnd = initRand(dot(DispatchRaysIndex(), uint3(1, 1, 1)), 0x12345678);  // cool hatching FX

        uint sampleCount = right ? RIGHT_SAMPLE_COUNT : LEFT_SAMPLE_COUNT;

//        AO = 1;

        rayDesc.Origin = rayDesc.Origin + rayDesc.Direction * payload.minT;
        // start slightly above the surface to avoid hit with own surface
        rayDesc.Origin += payload.interpolatedNormal * 0.001f;
        payload.minT = rayDesc.TMin;

        float3 incomingLight = 0;

        incomingLight = payload.emissiveColor * sampleCount;

        Reservoir dstReservoir;
      

        [loop] for(int i = 0; i < sampleCount; ++i)
        {
            if(localMethod == 2)
            {
                dstReservoir.init();

    /*
                if(localMethod == 2)
                {
                    // todo: spatial reuse
                    //
                    //

                    ReservoirPacked packed;
                    packed.raw[0] = g_Reservoirs[DispatchRaysIndex().xy * uint2(2, 1) + uint2(0, 0)];
                    packed.raw[1] = g_Reservoirs[DispatchRaysIndex().xy * uint2(2, 1) + uint2(1, 0)];
                    dstReservoir.loadFromRaw(packed);
                }
    */
            }

            RayPayload payload2 = (RayPayload)0;
            payload2.primitiveIndex = -1;
            payload2.instanceIndex = -1;
//            payload2.materialColor = float3(0.2f, 0.2f, 0.2f);        // ???? what is this ?
            payload2.minT = payload2.minTfront = rayDesc.TMax;

            float weight = 1.0f;
            if(localMethod == 1)
            {
                // normalized
                float3 lightNormal;
                float3 emissiveColor;
                // todo: rayDesc.Direction should be normalized?
                rayDesc.Direction = getEmissiveQuadSample(rayDesc.Origin, rndState, lightNormal, emissiveColor) - rayDesc.Origin;
                weight = computeWeight(rayDesc.Direction, payload.interpolatedNormal, lightNormal);

//                uint rndStateCopy = dstReservoir.rndState;

                // normalized
                TraceRay(Scene, flags, instanceMask, RayContributionToHitGroupIndex, MultiplierForGeometryContributionToHitGroupIndex, MissShaderIndex, rayDesc, payload2);

                payload2.emissiveColor *= BRIGHTNESS_HACK;
            }
            else if(localMethod == 2)
            {
//                if(g_sceneCB.updateReservoir == 1)
                {
//                    if(randomNext(rndState2) < 0.025f)
//                    {
//                        dstReservoir.init();
//                    }

                    ++dstReservoir.age;

                    if(dstReservoir.age > 30)
                        dstReservoir.init();

                    // aka RTXDI_SampleLocalLights(), todo: look deeper
                    Reservoir localReservoir = sampleLightsForReservoir(1, rndState, rayDesc.Origin, payload.interpolatedNormal);
                    dstReservoir.combine(localReservoir, 0.5f, localReservoir.targetPdf);
                    dstReservoir.finalize(1.0f, 1.0f);

                    bool resampling = g_sceneCB.resampling;
                    if(resampling)
                    {
                        // see RTXDI_DISpatioTemporalResampling()
                        dstReservoir = TemporalResampling(DispatchRaysIndex().xy, rndState, rayDesc.Origin, payload.interpolatedNormal, dstReservoir);
                    }
                }

                weight = dstReservoir.weightSum;

                uint rndStateCopy = dstReservoir.rndState;

                // normalized
                float3 lightNormal;
                float3 emissiveColor;
                // todo: rayDesc.Direction should be normalized?
                rayDesc.Direction = getEmissiveQuadSample(rayDesc.Origin, rndStateCopy, lightNormal, emissiveColor) - rayDesc.Origin;

                // needed to test if in shadow and to get payload2.emissiveColor
                TraceRay(Scene, flags, instanceMask, RayContributionToHitGroupIndex, MultiplierForGeometryContributionToHitGroupIndex, MissShaderIndex, rayDesc, payload2);

                weight *= computeWeight(rayDesc.Direction, payload.interpolatedNormal, lightNormal);

//                if(payload2.instanceIndex != 0)// && randomNext(rndState2) > 0.5f)
//                if(g_sceneCB.updateReservoir == 1)
                {
//                    if(!all(payload2.emissiveColor == emissiveColor))
                    if(payload2.emissiveColor.r > 0)    // is emissive, todo: maybe not the right emissive
                    {
                        highlightPixel = true;
                    }
                    else
                    {
                        // in shadow
                        weight = 0;
//                        dstReservoir.age = 0;
//                        dstReservoir.weightSum = 0;
//                        dstReservoir.init();
                    }
                }

                if(!dstReservoir.isValid())
                    payload2.emissiveColor = 0;

                payload2.emissiveColor *= BRIGHTNESS_HACK;
            }
            else // localMethod == 0
            {
                // reference 
                rayDesc.Direction = getCosHemisphereSample(rndState, payload.interpolatedNormal);

                TraceRay(Scene, flags, instanceMask, RayContributionToHitGroupIndex, MultiplierForGeometryContributionToHitGroupIndex, MissShaderIndex, rayDesc, payload2);

//                weight = saturate(dot(normalize(rayDesc.Direction), payload.interpolatedNormal));
//                weight *= saturate(dot(rayDesc.Direction, -payload2.interpolatedNormal));
            }

//            if(payload2.instanceIndex != 0 || g_sceneCB.wipeReservoir == 1)
//            {
//                dstReservoir.init();
//            }
//            dstReservoir.stream(rndState, weight);


            float3 addLight = 0;

//            incomingLight = addLight;

            // effect of sky onto others objects
//            if(payload2.instanceIndex == -1)
                addLight = payload2.emissiveColor;

//              addLight /= dstReservoir.weightSum;

//            if(dstReservoir.age > 0)
//                addLight *= weight / (dstReservoir.age+1);

            addLight *= weight;
            incomingLight += addLight;
        } // for(int i = 0; i < sampleCount; ++i)

        if(localMethod == 2)
        {
            ReservoirPacked packed = dstReservoir.storeToRaw();

            g_Reservoirs[DispatchRaysIndex().xy * uint2(2, 1) + int2(0, 0)] = packed.raw[0];
            g_Reservoirs[DispatchRaysIndex().xy * uint2(2, 1) + int2(1, 0)] = packed.raw[1];
        }

        // just in case
//        AO = saturate(AO);

        incomingLight /= sampleCount;

//        hdr = materialColor * (incomingLight + AO * skyColor);
        hdr = materialColor * incomingLight;
    }
    else hdr = payload.materialColor;   // sky

//    hdr *= 22.0f;    // brighter
//    hdr *= 0.25f;    // darker

    // feedback is in linear space
    g_Feedback[DispatchRaysIndex().xy] = lerp(g_Feedback[DispatchRaysIndex().xy], float4(hdr, 0), FEEDBACK_FRACTION);
    hdr = g_Feedback[DispatchRaysIndex().xy].rgb;

//    float3 ldr = filmicToneMapping(hdr);
    float3 ldr = pow(hdr, 1/2.2f);  // no tone mapping

//    if(highlightPixel)
//        ldr = float3(1, 0, 0);

#if GFX_FOR_ALL == 1
    if(showNormal)
        ldr = g_GBufferA[DispatchRaysIndex().xy].xyz * 0.5f + 0.5f;
    if(showDepth)
        ldr = saturate(float3(g_GBufferA[DispatchRaysIndex().xy].w * 0.05f, 0, 0)) * 0.7f;
    if(showAlbedo)
        ldr = saturate(payload.materialColor);
    if(showEmissive)
        ldr = saturate(payload.emissiveColor);

    ldr = lerp(ldr, ui.dstColor.rgb, ui.dstColor.a);
#endif //GFX_FOR_ALL == 1

    if(RIGHT_METHOD != LEFT_METHOD && DispatchRaysIndex().x == 1280/2)
        ldr = float3(0.5f, 0,0);    // red vertical line

    RenderTarget[DispatchRaysIndex().xy] = float4(ldr, 1);

#endif

    // closesthit
    //  TraceRay(Scene, RAY_FLAG_FORCE_NON_OPAQUE, instanceMask, RayContributionToHitGroupIndex, MultiplierForGeometryContributionToHitGroupIndex, MissShaderIndex, ray, payload);
    // anyhit
    //  TraceRay(Scene, RAY_FLAG_FORCE_NON_OPAQUE | RAY_FLAG_SKIP_CLOSEST_HIT_SHADER, instanceMask, RayContributionToHitGroupIndex, MultiplierForGeometryContributionToHitGroupIndex, MissShaderIndex, ray, payload);

        

// IntelArc artifact with g_Texture.Load()
//       uint endTime = NvGetSpecial(NV_SPECIALOP_GLOBAL_TIMER_LO);
 
//       float f = endTime * 0.1f;
//      RenderTarget[DispatchRaysIndex().xy] = float4(f,f,f, 1.0f);

//    float4 feedback = g_Feedback[DispatchRaysIndex().xy];

//    g_Feedback[DispatchRaysIndex().xy] = lerp(g_Feedback[DispatchRaysIndex().xy], RenderTarget[DispatchRaysIndex().xy], FEEDBACK_FRACTION);
//    RenderTarget[DispatchRaysIndex().xy] = g_Feedback[DispatchRaysIndex().xy];


    // hack
//    if(DispatchRaysIndex().x/2 < 256 && DispatchRaysIndex().y/2 < 256)
//        RenderTarget[DispatchRaysIndex().xy] = g_Texture.Load(int3(DispatchRaysIndex().xy / 2, 0));
}

[shader("closesthit")]
void MyClosestHitShader(inout RayPayload payload, in MyAttributes attr)
{
    payload.primitiveIndex = PrimitiveIndex(); // triangle or splat
    payload.instanceIndex = InstanceIndex();
    payload.minT = RayTCurrent();

    if (HitKind() == 1)
    {
        // AABB / Sphere / splat intersection
    
        // todo
    //    uint BIndex = InstanceID();
        uint BIndex = 0;

        Splat splat = g_splats[BIndex][payload.primitiveIndex];

        payload.materialColor = float3(0.6f, 0.5f, 0.4f);
        float3 wsPos = WorldRayOrigin() + WorldRayDirection() * RayTCurrent();
        payload.interpolatedNormal = normalize(wsPos - splat.position);
        return;
    }


    // e.g. 0:meshA, 1:meshB
    uint meshInstanceId = INSTANCE_ID;

    // triangle corner vertex indices
    const uint3 ii = LoadIndexBuffer(meshInstanceId, PrimitiveIndex());

    float3 bary = float3(1 - attr.barycentrics.x - attr.barycentrics.y, attr.barycentrics.x, attr.barycentrics.y);

    payload.materialColor = bary; // color from barycentrics


    // position in object space
    const float3 p0 = g_vertices[meshInstanceId][ii.x].position;
    const float3 p1 = g_vertices[meshInstanceId][ii.y].position;
    const float3 p2 = g_vertices[meshInstanceId][ii.z].position;

    const float3 n0 = normalize(g_vertices[meshInstanceId][ii.x].normal);
    const float3 n1 = normalize(g_vertices[meshInstanceId][ii.y].normal);
    const float3 n2 = normalize(g_vertices[meshInstanceId][ii.z].normal);

    const float3 c0 = IndexToColor(ii.x);
    const float3 c1 = IndexToColor(ii.y);
    const float3 c2 = IndexToColor(ii.z);

    float3 osNormal = n0 * bary.x + n1 * bary.y + n2 * bary.z;
    float3 osPos = p0 * bary.x + p1 * bary.y + p2 * bary.z;
    float3 wsPos = WorldRayOrigin() + WorldRayDirection() * RayTCurrent();
    float3 interpolIndex = c0 * bary.x + c1 * bary.y + c2 * bary.z;

    const uint materialId = g_vertices[meshInstanceId][ii.x].materialId;

    // visualize indexbuffer data as color
//    payload.materialColor = interpolIndex;

    // visualize object space position as color
//    payload.materialColor = frac(osPos);

//    payload.materialColor = IndexToColor(InstanceIndex() + 3) * 0.8f + 0.2f;
//    payload.materialColor = float3(0.9f, 0.8f, 0.7f);       // albedo color
    payload.materialColor = g_materials[meshInstanceId][materialId].diffuseColor;
//    payload.emissiveColor = g_materials[meshInstanceId][materialId].emissiveColor;
    payload.emissiveColor = g_materials[meshInstanceId][materialId].emissiveColor;

//    g_materials[]

    // visualize world space position as color
//    payload.materialColor = frac(wsPos);

    float3 triangleNormal = normalize(cross(p1 - p0, p2 - p0));
    
//    float3 worldNormal = mul(osNormal, (float3x3)ObjectToWorld3x4());           // todo: account for non uniform scale, some .obj have no normals stored
    float3 worldNormal = mul(triangleNormal, (float3x3)ObjectToWorld3x4());

    // only front should be emissive otherwise the math needs adjustment in various places
    if(dot(WorldRayDirection(), -worldNormal) <= 0.0f)
        payload.emissiveColor = 0;

//    if(dot(worldNormal, WorldRayDirection()) < 0)
//        worldNormal = -worldNormal;

    payload.interpolatedNormal = normalize(worldNormal);
}

// Inigo Quilez sphere ray intersection
// @param rayDir must be normalized
// https://iquilezles.org/articles/intersectors
float2 hit_sphere(float3 center, float radius, float3 rayStart, float3 rayDir)
{
    float3 oc = rayStart - center;
    float b = dot(oc, rayDir);
    float3 qc = oc - b * rayDir;
    float h = radius * radius - dot( qc, qc );
    if( h < 0.0f ) 
		return float2(-1, -1); // no intersection
    h = sqrt( h );
    return float2(-b -h, -b + h);
}

// todo: replace with hit_sphere()
// from https://gist.github.com/wwwtyro/beecc31d65d1004f5a9d
float2 raySphereIntersect(float3 r0, float3 rd, float3 s0, float sr) {
    // - r0: ray origin
    // - rd: normalized ray direction
    // - s0: sphere center
    // - sr: sphere radius
    // - Returns distance from r0 to first intersecion with sphere,
    //   or -1.0 if no intersection.
    float a = dot(rd, rd);
    float3 s0_r0 = r0 - s0;
    float b = 2.0 * dot(rd, s0_r0);
    float c = dot(s0_r0, s0_r0) - (sr * sr);
    if (b * b - 4.0 * a * c < 0.0) {
        return float2(-1, -1);
    }
    // todo: optimize
    float2 ret;
    ret.x = (-b - sqrt((b * b) - 4.0 * a * c)) / (2.0 * a);
    ret.y = (-b + sqrt((b * b) - 4.0 * a * c)) / (2.0 * a);
    return ret;
}

[shader("anyhit")]
void MyAnyHitShader(inout RayPayload payload, in MyAttributes attr)
{
    uint instanceId = INSTANCE_ID;

    // [tMin..tMax]
    float t = RayTCurrent();

    // not animated, 0.9f to clip Suzanne
//    const float radius = 0.9f;
    // animated
    float radius = 1.4f + 1.2f * sin(g_sceneCB.sceneParam0.y * 3.14159265f * 2.0f);

    // (tEnter, tExit)
    const float3 sphereCenter = float3(-0.5f, 0, 0);
    float2 tSphere = raySphereIntersect(WorldRayOrigin(), WorldRayDirection(), sphereCenter, radius);

    if(tSphere.x != -1) 
    {
        // if ray triangle hit is in clip object
        if (t > tSphere.x && t < tSphere.y)
        {
            // z buffer the triangle intersection
            if (t < payload.minT)
            {
                payload.minT = t;
                payload.minTfront = t;
                float3 barycentrics = float3(1 - attr.barycentrics.x - attr.barycentrics.y, attr.barycentrics.x, attr.barycentrics.y);
                payload.materialColor = barycentrics;

                // visualize triangleId as color, flat shading
//                payload.materialColor = IndexToColor(PrimitiveIndex());

                payload.interpolatedNormal = float3(0, 1, 0);

                const uint3 ii = LoadIndexBuffer(instanceId, PrimitiveIndex());

                float3 bary = float3(attr.barycentrics.x, attr.barycentrics.y, 1.0 - attr.barycentrics.x - attr.barycentrics.y);

                // position in object space
                const float3 p0 = g_vertices[instanceId][ii.x].position;
                const float3 p1 = g_vertices[instanceId][ii.y].position;
                const float3 p2 = g_vertices[instanceId][ii.z].position;
                // visualize position id as color, gourand shading
//                payload.materialColor = (p0 + bary.x * (p1 - p0) + bary.y * (p2 - p0));

                // visualize indexbuffer id as color, gourand shading
//                const float3 vCol0 = IndexToColor(ii.x);
//                const float3 vCol1 = IndexToColor(ii.y);
//                const float3 vCol2 = IndexToColor(ii.z);
//                payload.materialColor = vCol0 + bary.x * (vCol1 - vCol0) + bary.y * (vCol2 - vCol0);

                float3 triangleNormal = normalize(cross(p2 - p0, p1 - p0));

                float3 worldPosition = WorldRayOrigin() + WorldRayDirection() * RayTCurrent();
//                float3 worldNormal = mul(attr.normal, (float3x3)ObjectToWorld3x4());
                float3 worldNormal = mul(triangleNormal, (float3x3)ObjectToWorld3x4());

                payload.primitiveIndex = PrimitiveIndex();
                payload.interpolatedNormal = normalize(worldNormal);
            }
        }

        if (t >= tSphere.x) {
            // count the number of triangle hit events after the sphere start
            // odd/even tells us if we are inside the surface
            ++payload.count;
        }

        if (t < tSphere.x) {
            // if hit is backfacing
//            if(HitKind() == HIT_KIND_TRIANGLE_FRONT_FACE)
                // z buffer the sphere entrance
                if (t < payload.minT) {
                    payload.minT = t;
                    payload.minTfront = tSphere.x;
                    float3 localPos = WorldRayOrigin() - sphereCenter + payload.minT * WorldRayDirection();
                    // world normal
                    payload.interpolatedNormal = normalize(-localPos);
                }
        }
    /*    if (t >= tSphere.x && tSphere.x != -1) {
            // count the number of triangle hit events after the sphere start
            // odd/even tells us if we are inside the surface
            ++payload.count;

            // if hit is backfacing
            if (HitKind() == HIT_KIND_TRIANGLE_FRONT_FACE)
                // z buffer the sphere entrance
                if (tSphere.x < payload.minT) {
                    payload.minT = tSphere.x;
                    float3 localPos = WorldRayOrigin() - sphereCenter + payload.minT * WorldRayDirection();
                    payload.interpolatedNormal = normalize(localPos);
                }
        }
    */
    }

    // do not stop ray intersection, also calls miss shader
    IgnoreHit();
}

[shader("miss")]
void MyMissShader(inout RayPayload payload)
{
    payload.materialColor = getSkyColor(WorldRayDirection());
}

[shader("intersection")]
void MyIntersectShader()
{
    //	// 0-127, can query with: uint hitKind = HitKind()
	uint hitKind = 1;

    // set to 1 to visualize AABB
    if(0)
    {
        BuiltInTriangleIntersectionAttributes attr;
        attr.barycentrics = 0.5f; // required for stable result
        // ReportHit(0, .. would not be a valid hit
        ReportHit(0.01f, hitKind, attr);
        return;
    }

    uint prim = PrimitiveIndex();

    // todo
//    uint BIndex = InstanceID();
    uint BIndex = 0;

    Splat splat = g_splats[BIndex][prim];

    // slide 153 https://intro-to-dxr.cwyman.org/presentations/IntroDXR_ShaderTutorial.pdf
    float3 sphCenter = splat.position;
    float sphRadius = splat.radius;


    float2 hit2 = hit_sphere(sphCenter, sphRadius, ObjectRayOrigin(), ObjectRayDirection());
    if (hit2.x >= 0.0f)
    {
        BuiltInTriangleIntersectionAttributes attr;
        attr.barycentrics = 0.5f;
        ReportHit(hit2.x, hitKind, attr );
    }
}


#endif // RAYTRACING_HLSL