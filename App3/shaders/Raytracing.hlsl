// 0:MyClosestHitShader barycentric triangle color, visualize world normal
// 1:MyAnyHitShader CSG boolean mesh operation
// 2:Single bounce Indirect lighting
#define RAY_TRACING_EXPERIMENT 2

// 0/1
#define INSTANCE_1_IS_EMISSIVE 1
// 0/1
#define SKY_IS_EMISSIVE 0
// To tweak TemporalAA >0, .. 1.0f:no temporalFeedback, 0.5f is ok
#define FEEDBACK_FRACTION  1.0f
// 0/1 animate TemporalAA jitter and noise seed
#define ANIMATE_OVER_TIME 0
// 1:very low, 8:low, 64:good
#define SAMPLE_COUNT_AO 256
// 0:reference path tracing / 1:less noise, 2: viewport split in half
#define AREA_LIGHT_SAMPLING 2



#define INSTANCE_ID InstanceID()
// test
//#define INSTANCE_ID 0

// DXR functions
//  PrimitiveIndex() triangleId
//  InstanceID() user provided
//  InstanceIndex() autogenerated 
//  GeometryIndex() autogenerated (not valid is SM 6.3)
//  ObjectRayOrigin()
//  ObjectRayDirection()
//  ObjectToWorld3x4()
//  ObjectToWorld4x3()
//  WorldRayOrigin()
//  WorldRayDirection()
//  WorldToObject3x4()
//  WorldToObject4x3()
//
// ShaderModel 6.6 https://microsoft.github.io/DirectX-Specs/d3d/HLSL_SM_6_6_DynamicResources.html
// ResourceDescriptorHeap[] 

#ifndef RAYTRACING_HLSL
#define RAYTRACING_HLSL

#include "RaytracingHlslCompat.h"
#include "cellular.hlsl"
#include "Helper.hlsl"
#include "Reservoir.hlsl"

#define NV_SHADER_EXTN_SLOT u1
#define NV_SHADER_EXTN_REGISTER_SPACE space1
#include "../../external/nv-api/nvHLSLExtns.h"

RaytracingAccelerationStructure Scene : register(t0, space0);
// frame buffer sized
RWTexture2D<float4> RenderTarget : register(u0);
// frame buffer sized
RWTexture2D<float4> g_Feedback : register(u1);
// frame buffer sized
RWTexture2D<float4> g_Reservoirs : register(u2);
//
ConstantBuffer<SceneConstantBuffer> g_sceneCB : register(b0);
//
ConstantBuffer<RayGenConstantBuffer> g_rayGenCB : register(b1);

// sizeof(IndexType) 2:16bit, 4:32bit
#define INDEX_STRIDE 4

struct Splat
{
    float3 position;
    float radius;
};

// index buffer (element size is INDEX_STRIDE)
ByteAddressBuffer g_indices[] : register(t0, space101);
// vertex buffer
StructuredBuffer<VFormatFull> g_vertices[] : register(t0, space102);
Texture2D<float4> g_Texture : register(t0, space103);
StructuredBuffer<Splat> g_splats[] : register(t0, space104);
StructuredBuffer<MaterialAttributes> g_materials[] : register(t0, space105);

// https://microsoft.github.io/DirectX-Specs/d3d/Raytracing.html
// { float2 barycentrics }
typedef BuiltInTriangleIntersectionAttributes MyAttributes;

// update App3.cpp if this gets larger
struct RayPayload
{
    // skycolor or material color
    float3 materialColor;
    // in world space, normalized, (0,0,0) means emissive
    float3 interpolatedNormal;
    // -1 if not set
    int primitiveIndex;
    // -1 if not set
    int instanceIndex;
    // to count intersections after sphere start, to test if inside the object
    int count;
    // used like z buffer, the smallest valus is used
    float minT;
    float minTfront;
};

struct Ray
{
    float3 origin;
    // normalized
    float3 direction;
};

// @param primitiveIndex from PrimitiveIndex()
// @return triangle corner vertex indices
uint3 LoadIndexBuffer( uint primitiveIndex )
{
    const uint indexOffsetBytes = 0;    // for now
    // triangle corner vertex indices
    uint offsetBytes = indexOffsetBytes + primitiveIndex * (INDEX_STRIDE * 3);

    // needed?
    const uint dwordAlignedOffset = offsetBytes & ~3;

    uint3 indices;

    uint IBIndex = INSTANCE_ID;

    if(INDEX_STRIDE == 2)
    {
        const uint2 four16BitIndices = g_indices[IBIndex].Load2(dwordAlignedOffset);


        if (dwordAlignedOffset == offsetBytes)
        {
            indices.x = four16BitIndices.x & 0xffff;
            indices.y = (four16BitIndices.x >> 16) & 0xffff;
            indices.z = four16BitIndices.y & 0xffff;
        }
        else
        {
            indices.x = (four16BitIndices.x >> 16) & 0xffff;
            indices.y = four16BitIndices.y & 0xffff;
            indices.z = (four16BitIndices.y >> 16) & 0xffff;
        }
    }
    else
    {
        indices = g_indices[IBIndex].Load3(dwordAlignedOffset);
    }


    return indices;
}

inline Ray GenerateCameraRay(uint2 index, in float3 cameraPosition, in float4x4 worldFromClip, float2 jitterXY)
{
#if ANTIALIASING == 0
    float2 xy = index + 0.5f; // center in the middle of the pixel.
#else // ANTIALIASING
    // 0..1
//    float jitter = ((g_sceneCB.FrameIndex % 8) + 0.5f) / 8.0f;
    // float2(0..1, 0..1)
//    float2 jitterXY = float2(frac(jitter * 4.0f), jitter);
    float2 xy = index + jitterXY;
#endif // ANTIALIASING

    float2 screenPos = xy / DispatchRaysDimensions().xy * 2.0 - 1.0;

    // Invert Y for DirectX-style coordinates.
    screenPos.y = -screenPos.y;

    // a way to compute cameraPosition, need to rename the input parameter
//    float4 cameraPositionHom = mul(worldFromClip, float4(0, 0, 0, 1));
//    float3 cameraPosition = cameraPositionHom.xyz / cameraPositionHom.w;

    // Unproject the pixel coordinate into a world position.
    float4 worldHom = mul(worldFromClip, float4(screenPos, 1, 1));
    float3 world = worldHom.xyz / worldHom.w;

    Ray ray;
    ray.origin = cameraPosition;
    ray.direction = normalize(world - ray.origin);

    return ray;
}


float3 filmicToneMapping(float3 color)
{
    color = max(0, color - 0.004f);
    color = (color * (6.2f * color + 0.5f)) / (color * (6.2f * color + 1.7f) + 0.06f);
    return color;
}

// @param worldRayDirection normalized, e.g. WorldRayDirection()
float3 getSkyColor(float3 worldRayDirection)
{
    float3 skyColor = 0;

#if SKY_IS_EMISSIVE == 1
    // 0..1
    float alpha = worldRayDirection.y * 0.5f + 0.5f;
    skyColor = lerp(float3(0.2f, 0.3f, 0.9f) * 0.2f, float3(0.2f, 0.3f, 0.9f) * 0.6f, alpha);
#endif

    return skyColor;
}

// hard coded to work with Quad.obj
// @param outNormal will be normalized
float3 getEmissiveQuadSample(float3 rayDirection, inout uint rnd, out float3 outNormal)
{
    float yPos = 2.95f; // pretty close to the area light in the original Cornell box

	// 0..1
	float2 uv = nextRand2(rnd);

    // todo: flip if needed
    if(rayDirection.y > yPos)
        outNormal = float3(0, 1, 0);
    else
        outNormal = float3(0, -1, 0);

    return float3(uv.x * 2 - 1, 0, uv.y * 2 - 1) * 4 *  0.08f + float3(0, yPos, 0);
}

[shader("raygeneration")]
void MyRaygenShader()
{
    // animate jitter offset over time for TemporalAA
    int2 move = 0;
#if ANIMATE_OVER_TIME == 1
    move = g_sceneCB.FrameIndex * int2(13, 7);
#endif

    // float2(0..1, 0..1) Blue Noise
    float2 jitterXY = g_Texture.Load(int3((DispatchRaysIndex().xy + move) % 256, 0)).rg;

// IntelArc artifact with g_Texture.Load()
//    uint startTime = NvGetSpecial(NV_SPECIALOP_GLOBAL_TIMER_LO);

    float2 lerpValues = (float2)DispatchRaysIndex() / (float2)DispatchRaysDimensions();

    float fracTime = g_sceneCB.sceneParam0.x;

    uint section = DispatchRaysIndex().x / 8;

    Ray ray = GenerateCameraRay(DispatchRaysIndex().xy, g_sceneCB.cameraPosition.xyz, g_sceneCB.worldFromClip, jitterXY);
    float3 origin = ray.origin;
    float3 rayDir = ray.direction;
//    float3 origin = float3(0, 0, -1);
//    float3 rayDir = float3(lerpValues.xy * 2.0f - 1.0f, 1);

    // Trace the ray.
    // Set the ray's extents.
    RayDesc rayDesc;
    rayDesc.Origin = origin;
    rayDesc.Direction = rayDir;
    // Set TMin to a non-zero small value to avoid aliasing issues due to floating - point errors.
    // TMin should be kept small to prevent missing geometry at close contact areas.
    rayDesc.TMin = 0.001f;
    rayDesc.TMax = 10000.0f;


    // ugly visualize getEmissiveQuadSample
    if(0)
    for(int i = 0; i < 50; ++i)
    {
        const float sphereRadius = 0.05f;

        uint rnd2 = initRand(82927 * i, 1233);

        float3 normal;
        float3 samplePos = getEmissiveQuadSample(rayDesc.Origin, rnd2, normal);
        if(sphIntersect(rayDesc.Origin, rayDesc.Direction, samplePos, sphereRadius).y > 0) // yellow sphere
        {
            RenderTarget[DispatchRaysIndex().xy] = float4(1, 1, 0, 1);
            return;
        }
        if(sphIntersect(rayDesc.Origin, rayDesc.Direction, samplePos + normal * sphereRadius, 0.03f).y > 0)    // with white dot to indicate normal direction
        {
            RenderTarget[DispatchRaysIndex().xy] = float4(1, 1, 1, 1);
            return;
        }
    }



    RayPayload payload = (RayPayload)0;
    payload.primitiveIndex = -1;
    payload.instanceIndex = -1;
    payload.minT = payload.minTfront = rayDesc.TMax;

    //RAY_FLAG flags = RAY_FLAG_CULL_BACK_FACING_TRIANGLES;
    RAY_FLAG flags = RAY_FLAG_NONE;
    uint instanceMask = ~0;

    uint RayContributionToHitGroupIndex = 0;
    uint MultiplierForGeometryContributionToHitGroupIndex = 1;
    uint MissShaderIndex = 0;

#if RAY_TRACING_EXPERIMENT == 0
    // closesthit
    TraceRay(Scene, flags, instanceMask, RayContributionToHitGroupIndex, MultiplierForGeometryContributionToHitGroupIndex, MissShaderIndex, rayDesc, payload);
    RenderTarget[DispatchRaysIndex().xy] = float4(payload.interpolatedNormal * 0.5f + 0.5f, 1.0f); // face normal
//    RenderTarget[DispatchRaysIndex().xy] = float4(payload.materialColor, 1.0f); // color e.g. barycentrics
//    RenderTarget[DispatchRaysIndex().xy] = float4(IndexToColor(payload.primitiveIndex), 1); // unique color for each triangle


#elif RAY_TRACING_EXPERIMENT == 1
    TraceRay(Scene, g_sceneCB.raytraceFlags, instanceMask, RayContributionToHitGroupIndex, MultiplierForGeometryContributionToHitGroupIndex, MissShaderIndex, rayDesc, payload);
    RenderTarget[DispatchRaysIndex().xy] = float4(payload.interpolatedNormal * 0.5f + 0.5f, 1.0f); // normal

#elif RAY_TRACING_EXPERIMENT == 2
//    float AO = 0.0f;
    TraceRay(Scene, flags, instanceMask, RayContributionToHitGroupIndex, MultiplierForGeometryContributionToHitGroupIndex, MissShaderIndex, rayDesc, payload);

    float3 hdr = 0;

    if (any(payload.interpolatedNormal != float3(0, 0, 0))) // if emissive?
    {
        const float3 materialColor = payload.materialColor;

        //
        // animate random over time for monte carlo integration 
        uint perFrameNoiseSeed = 0;
#if ANIMATE_OVER_TIME == 1
        perFrameNoiseSeed = (uint)(g_sceneCB.sceneParam0.x * 12347);
#endif

        uint rnd = initRand(dot(DispatchRaysIndex(), uint3(82927, 21313, 1)), 0x12345678 + perFrameNoiseSeed);
//        uint rnd = initRand(dot(DispatchRaysIndex(), uint3(1, 1, 1)), 0x12345678);  // cool hatching FX

        uint sampleCountAO = SAMPLE_COUNT_AO;

//        AO = 1;

        rayDesc.Origin = rayDesc.Origin + rayDesc.Direction * payload.minT;
        // start slightly above the surface to avoid hit with own surface
        rayDesc.Origin += payload.interpolatedNormal * 0.001f;
        payload.minT = rayDesc.TMin;

        float3 incomingLight = 0;

#if INSTANCE_1_IS_EMISSIVE == 1
        // emissive object shows it's own emissiveness
        if (payload.instanceIndex == 0)
            incomingLight = payload.materialColor * 2 * sampleCountAO;
#endif

        bool areaLightSampling = AREA_LIGHT_SAMPLING == 1 || (AREA_LIGHT_SAMPLING == 2  && DispatchRaysIndex().x > 1280/2);

        uint rndState = randomInit(DispatchRaysIndex().x, DispatchRaysIndex().y);

        Reservoir reservoir;
        reservoir.init();

        for(int i = 0; i < sampleCountAO; ++i)
        {
            float weight = 1.0f;

            if(areaLightSampling)
            {
                // normalized
                float3 lightNormal;
                float3 delta = getEmissiveQuadSample(rayDesc.Origin, rnd, lightNormal) - rayDesc.Origin;
                float deltaLength2 = dot(delta, delta);
//                rayDesc.Direction = delta / (0.0001f + sqrt(deltaLength2)); // bias to avoid div by 0
                rayDesc.Direction = normalize(delta);
                // lambert weight
                float area = 64.0f * sqr(0.08f); // -4..4 * 0.08f => 8x8 * 0.08f * 0.08f
    //            addLight *= saturate(dot(rayDesc.Direction, payload.interpolatedNormal)) * 100 / area;   // 100 is hack
                // https://pbr-book.org/3ed-2018/Light_Transport_I_Surface_Reflection/Sampling_Light_Sources
    //            float pdf = deltaLength2 / (max(0.0f, dot(lightNormal, -rayDesc.Direction)) * area);
    //            weight = 1.0f / pdf / PI;
    //            weight = (max(0.0f, dot(lightNormal, -payload.interpolatedNormal)) * area) / deltaLength2 / PI;  // wrong
                weight = area / deltaLength2 / PI;  // wrong

                // lambert
                weight *= saturate(dot(rayDesc.Direction, payload.interpolatedNormal));
                weight *= saturate(dot(rayDesc.Direction, -lightNormal));

//                reservoir.loadFromRaw(g_Reservoirs[DispatchRaysIndex().xy]);

                reservoir.push(rndState, weight);

                randomNext(rndState);

//                g_Reservoirs[DispatchRaysIndex().xy] = reservoir.storeToRaw();
            }
            else
            {
                // reference 
                rayDesc.Direction = getCosHemisphereSample(rnd, payload.interpolatedNormal);
            }

            RayPayload payload2 = (RayPayload)0;
            payload2.primitiveIndex = -1;
            payload2.instanceIndex = -1;
            payload2.materialColor = float3(0.2f, 0.2f, 0.2f);        // ???? what is this ?
            payload2.minT = payload2.minTfront = rayDesc.TMax;

            TraceRay(Scene, flags, instanceMask, RayContributionToHitGroupIndex, MultiplierForGeometryContributionToHitGroupIndex, MissShaderIndex, rayDesc, payload2);

            float3 addLight = 0;

//            incomingLight = addLight;

#if INSTANCE_1_IS_EMISSIVE == 1
            // effect of emissive object onto others objects
            if(payload2.instanceIndex == 0)
                addLight = payload2.materialColor*2;
#endif
            // effect of sky onto others objects
            if(payload2.instanceIndex == -1)
                addLight = payload2.materialColor*2;

//            if(all(payload2.interpolatedNormal != float3(0, 0, 0)))
//            {
//                AO -= 1.0f / sampleCountAO;
//                unoccludedAreaDirection += rayDesc.Direction;
//            }

            addLight *= weight;
            incomingLight += addLight;
        }
        // just in case
//        AO = saturate(AO);

        incomingLight /= sampleCountAO;

//        hdr = materialColor * (incomingLight + AO * skyColor);
        hdr = materialColor * incomingLight;
    }
    else hdr = payload.materialColor;   // sky


    hdr *= 4.0f;    // brighter

    float3 ldr = filmicToneMapping(hdr);

    if(AREA_LIGHT_SAMPLING == 2 && DispatchRaysIndex().x == 1280/2)
        ldr = float3(0.5f, 0,0);    // red vertical line

    RenderTarget[DispatchRaysIndex().xy] = float4(ldr, 1);

#endif

    // closesthit
    //  TraceRay(Scene, RAY_FLAG_FORCE_NON_OPAQUE, instanceMask, RayContributionToHitGroupIndex, MultiplierForGeometryContributionToHitGroupIndex, MissShaderIndex, ray, payload);
    // anyhit
    //  TraceRay(Scene, RAY_FLAG_FORCE_NON_OPAQUE | RAY_FLAG_SKIP_CLOSEST_HIT_SHADER, instanceMask, RayContributionToHitGroupIndex, MultiplierForGeometryContributionToHitGroupIndex, MissShaderIndex, ray, payload);

        

// IntelArc artifact with g_Texture.Load()
//       uint endTime = NvGetSpecial(NV_SPECIALOP_GLOBAL_TIMER_LO);
 
//       float f = endTime * 0.1f;
//      RenderTarget[DispatchRaysIndex().xy] = float4(f,f,f, 1.0f);

    if(0)
    {
        float col = 0;

        if(payload.count)
        {
            // world space position
            float3 pos = rayDesc.Origin + rayDesc.Direction * payload.minT;

            float2 cel = cellular(pos * 10.0f);
            col = 1.0f - cel.x;
        }



        RenderTarget[DispatchRaysIndex().xy] = float4(col, 0, 0, 1);
    }

//    float4 feedback = g_Feedback[DispatchRaysIndex().xy];

    g_Feedback[DispatchRaysIndex().xy] = lerp(g_Feedback[DispatchRaysIndex().xy], RenderTarget[DispatchRaysIndex().xy], FEEDBACK_FRACTION);
    RenderTarget[DispatchRaysIndex().xy] = g_Feedback[DispatchRaysIndex().xy];


    // hack
//    if(DispatchRaysIndex().x/2 < 256 && DispatchRaysIndex().y/2 < 256)
//        RenderTarget[DispatchRaysIndex().xy] = g_Texture.Load(int3(DispatchRaysIndex().xy / 2, 0));
}

[shader("closesthit")]
void MyClosestHitShader(inout RayPayload payload, in MyAttributes attr)
{
    payload.primitiveIndex = PrimitiveIndex(); // triangle or splat
    payload.instanceIndex = InstanceIndex();
    payload.minT = RayTCurrent();

    if (HitKind() == 1)
    {
        // AABB / Sphere / splat intersection
    
        // todo
    //    uint BIndex = InstanceID();
        uint BIndex = 0;

        Splat splat = g_splats[BIndex][payload.primitiveIndex];

        payload.materialColor = float3(0.6f, 0.5f, 0.4f);
        float3 wsPos = WorldRayOrigin() + WorldRayDirection() * RayTCurrent();
        payload.interpolatedNormal = normalize(wsPos - splat.position);
        return;
    }



    // triangle corner vertex indices
    const uint3 ii = LoadIndexBuffer(PrimitiveIndex());

    float3 bary = float3(1 - attr.barycentrics.x - attr.barycentrics.y, attr.barycentrics.x, attr.barycentrics.y);

    payload.materialColor = bary; // color from barycentrics

    uint instanceId = INSTANCE_ID;

    // position in object space
    const float3 p0 = g_vertices[instanceId][ii.x].position;
    const float3 p1 = g_vertices[instanceId][ii.y].position;
    const float3 p2 = g_vertices[instanceId][ii.z].position;

    const float3 n0 = normalize(g_vertices[instanceId][ii.x].normal);
    const float3 n1 = normalize(g_vertices[instanceId][ii.y].normal);
    const float3 n2 = normalize(g_vertices[instanceId][ii.z].normal);

    const float3 c0 = IndexToColor(ii.x);
    const float3 c1 = IndexToColor(ii.y);
    const float3 c2 = IndexToColor(ii.z);

    float3 osNormal = n0 * bary.x + n1 * bary.y + n2 * bary.z;
    float3 osPos = p0 * bary.x + p1 * bary.y + p2 * bary.z;
    float3 wsPos = WorldRayOrigin() + WorldRayDirection() * RayTCurrent();
    float3 interpolIndex = c0 * bary.x + c1 * bary.y + c2 * bary.z;

    const uint materialId = g_vertices[instanceId][ii.x].materialId;

    // visualize indexbuffer data as color
//    payload.materialColor = interpolIndex;

    // visualize object space position as color
//    payload.materialColor = frac(osPos);

//    payload.materialColor = IndexToColor(InstanceIndex() + 3) * 0.8f + 0.2f;
//    payload.materialColor = float3(0.9f, 0.8f, 0.7f);       // albedo color
    payload.materialColor = g_materials[instanceId][materialId].diffuseColor;
//    g_materials[]

    // visualize world space position as color
//    payload.materialColor = frac(wsPos);

    float3 triangleNormal = normalize(cross(p1 - p0, p2 - p0));
    
//    float3 worldNormal = mul(osNormal, (float3x3)ObjectToWorld3x4());           // todo: account for non uniform scale, some .obj have no normals stored
    float3 worldNormal = mul(triangleNormal, (float3x3)ObjectToWorld3x4());

//    if(dot(worldNormal, WorldRayDirection()) < 0)
//        worldNormal = -worldNormal;

    payload.interpolatedNormal = normalize(worldNormal);
}

// Inigo Quilez sphere ray intersection
// @param rayDir must be normalized
// https://iquilezles.org/articles/intersectors
float2 hit_sphere(float3 center, float radius, float3 rayStart, float3 rayDir)
{
    float3 oc = rayStart - center;
    float b = dot(oc, rayDir);
    float3 qc = oc - b * rayDir;
    float h = radius * radius - dot( qc, qc );
    if( h < 0.0f ) 
		return float2(-1, -1); // no intersection
    h = sqrt( h );
    return float2(-b -h, -b + h);
}

// todo: replace with hit_sphere()
// from https://gist.github.com/wwwtyro/beecc31d65d1004f5a9d
float2 raySphereIntersect(float3 r0, float3 rd, float3 s0, float sr) {
    // - r0: ray origin
    // - rd: normalized ray direction
    // - s0: sphere center
    // - sr: sphere radius
    // - Returns distance from r0 to first intersecion with sphere,
    //   or -1.0 if no intersection.
    float a = dot(rd, rd);
    float3 s0_r0 = r0 - s0;
    float b = 2.0 * dot(rd, s0_r0);
    float c = dot(s0_r0, s0_r0) - (sr * sr);
    if (b * b - 4.0 * a * c < 0.0) {
        return float2(-1, -1);
    }
    // todo: optimize
    float2 ret;
    ret.x = (-b - sqrt((b * b) - 4.0 * a * c)) / (2.0 * a);
    ret.y = (-b + sqrt((b * b) - 4.0 * a * c)) / (2.0 * a);
    return ret;
}

[shader("anyhit")]
void MyAnyHitShader(inout RayPayload payload, in MyAttributes attr)
{
    uint instanceId = INSTANCE_ID;

    // [tMin..tMax]
    float t = RayTCurrent();

    // not animated, 0.9f to clip Suzanne
//    const float radius = 0.9f;
    // animated
    float radius = 1.4f + 1.2f * sin(g_sceneCB.sceneParam0.y * 3.14159265f * 2.0f);

    // (tEnter, tExit)
    const float3 sphereCenter = float3(-0.5f, 0, 0);
    float2 tSphere = raySphereIntersect(WorldRayOrigin(), WorldRayDirection(), sphereCenter, radius);

    if(tSphere.x != -1) 
    {
        // if ray triangle hit is in clip object
        if (t > tSphere.x && t < tSphere.y)
        {
            // z buffer the triangle intersection
            if (t < payload.minT)
            {
                payload.minT = t;
                payload.minTfront = t;
                float3 barycentrics = float3(1 - attr.barycentrics.x - attr.barycentrics.y, attr.barycentrics.x, attr.barycentrics.y);
                payload.materialColor = barycentrics;

                // visualize triangleId as color, flat shading
//                payload.materialColor = IndexToColor(PrimitiveIndex());

                payload.interpolatedNormal = float3(0, 1, 0);

                const uint3 ii = LoadIndexBuffer(PrimitiveIndex());

                float3 bary = float3(attr.barycentrics.x, attr.barycentrics.y, 1.0 - attr.barycentrics.x - attr.barycentrics.y);

                // position in object space
                const float3 p0 = g_vertices[instanceId][ii.x].position;
                const float3 p1 = g_vertices[instanceId][ii.y].position;
                const float3 p2 = g_vertices[instanceId][ii.z].position;
                // visualize position id as color, gourand shading
//                payload.materialColor = (p0 + bary.x * (p1 - p0) + bary.y * (p2 - p0));

                // visualize indexbuffer id as color, gourand shading
//                const float3 vCol0 = IndexToColor(ii.x);
//                const float3 vCol1 = IndexToColor(ii.y);
//                const float3 vCol2 = IndexToColor(ii.z);
//                payload.materialColor = vCol0 + bary.x * (vCol1 - vCol0) + bary.y * (vCol2 - vCol0);

                float3 triangleNormal = normalize(cross(p2 - p0, p1 - p0));

                float3 worldPosition = WorldRayOrigin() + WorldRayDirection() * RayTCurrent();
//                float3 worldNormal = mul(attr.normal, (float3x3)ObjectToWorld3x4());
                float3 worldNormal = mul(triangleNormal, (float3x3)ObjectToWorld3x4());

                payload.primitiveIndex = PrimitiveIndex();
                payload.interpolatedNormal = normalize(worldNormal);
            }
        }

        if (t >= tSphere.x) {
            // count the number of triangle hit events after the sphere start
            // odd/even tells us if we are inside the surface
            ++payload.count;
        }

        if (t < tSphere.x) {
            // if hit is backfacing
//            if(HitKind() == HIT_KIND_TRIANGLE_FRONT_FACE)
                // z buffer the sphere entrance
                if (t < payload.minT) {
                    payload.minT = t;
                    payload.minTfront = tSphere.x;
                    float3 localPos = WorldRayOrigin() - sphereCenter + payload.minT * WorldRayDirection();
                    // world normal
                    payload.interpolatedNormal = normalize(-localPos);
                }
        }
    /*    if (t >= tSphere.x && tSphere.x != -1) {
            // count the number of triangle hit events after the sphere start
            // odd/even tells us if we are inside the surface
            ++payload.count;

            // if hit is backfacing
            if (HitKind() == HIT_KIND_TRIANGLE_FRONT_FACE)
                // z buffer the sphere entrance
                if (tSphere.x < payload.minT) {
                    payload.minT = tSphere.x;
                    float3 localPos = WorldRayOrigin() - sphereCenter + payload.minT * WorldRayDirection();
                    payload.interpolatedNormal = normalize(localPos);
                }
        }
    */
    }

    // do not stop ray intersection, also calls miss shader
    IgnoreHit();
}

[shader("miss")]
void MyMissShader(inout RayPayload payload)
{
    payload.materialColor = getSkyColor(WorldRayDirection());
}

[shader("intersection")]
void MyIntersectShader()
{
    //	// 0-127, can query with: uint hitKind = HitKind()
	uint hitKind = 1;

    // set to 1 to visualize AABB
    if(0)
    {
        BuiltInTriangleIntersectionAttributes attr;
        attr.barycentrics = 0.5f; // required for stable result
        // ReportHit(0, .. would not be a valid hit
        ReportHit(0.01f, hitKind, attr);
        return;
    }

    uint prim = PrimitiveIndex();

    // todo
//    uint BIndex = InstanceID();
    uint BIndex = 0;

    Splat splat = g_splats[BIndex][prim];

    // slide 153 https://intro-to-dxr.cwyman.org/presentations/IntroDXR_ShaderTutorial.pdf
    float3 sphCenter = splat.position;
    float sphRadius = splat.radius;


    float2 hit2 = hit_sphere(sphCenter, sphRadius, ObjectRayOrigin(), ObjectRayDirection());
    if (hit2.x >= 0.0f)
    {
        BuiltInTriangleIntersectionAttributes attr;
        attr.barycentrics = 0.5f;
        ReportHit(hit2.x, hitKind, attr );
    }
}


#endif // RAYTRACING_HLSL